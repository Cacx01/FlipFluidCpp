name: Build and publish binaries

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libglfw3-dev libgl1-mesa-dev libx11-dev libxcursor-dev libxrandr-dev libxi-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake glfw

      - name: Setup vcpkg and install glfw (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/microsoft/vcpkg.git $env:GITHUB_WORKSPACE\vcpkg
          & $env:GITHUB_WORKSPACE\vcpkg\bootstrap-vcpkg.bat
          & $env:GITHUB_WORKSPACE\vcpkg\vcpkg.exe install glfw3:x64-windows
        shell: powershell

      - name: Configure & build (Linux / macOS)
        if: matrix.os != 'windows-latest'
        run: |
          # Ensure a clean build directory to avoid stale CMakeCache.txt from other projects
          rm -rf build
          mkdir -p build
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          CORES=$(nproc 2>/dev/null || sysctl -n hw.logicalcpu)
          cmake --build build --config Release -- -j${CORES}
        shell: bash

      - name: Configure & build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Ensure a clean build directory
          if (Test-Path build) { Remove-Item -Recurse -Force build }
          New-Item -ItemType Directory -Path build | Out-Null
          $VCPKG_ROOT = Join-Path $env:GITHUB_WORKSPACE 'vcpkg'
          $toolchain = Join-Path $VCPKG_ROOT 'scripts\buildsystems\vcpkg.cmake'
          cmake -S . -B build -A x64 -DCMAKE_TOOLCHAIN_FILE="$toolchain" -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release

          # Try to locate glfw3.dll under the vcpkg installed tree and copy it next to the exe
          $dll = Get-ChildItem -Path (Join-Path $VCPKG_ROOT 'installed') -Filter 'glfw3.dll' -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($dll -ne $null) {
            Copy-Item $dll.FullName -Destination 'build\Release\' -Force
            Write-Host "Copied $($dll.FullName) to build\\Release"
          } else {
            Write-Host "glfw3.dll not found under $VCPKG_ROOT\installed. Attempting common locations..."
            $alt = Join-Path $VCPKG_ROOT 'installed\x64-windows\bin\glfw3.dll'
            if (Test-Path $alt) {
              Copy-Item $alt -Destination 'build\Release\' -Force
              Write-Host "Copied $alt to build\\Release"
            } else {
              Write-Host "glfw3.dll not found. Build may still succeed but runtime DLL will be missing."
            }
          }

          # List build output for debugging
          Write-Host "Contents of build\\Release:"
          Get-ChildItem -Path 'build\\Release' -Force | ForEach-Object { Write-Host $_.FullName }
        shell: powershell

      - name: Package and upload (Linux / macOS)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: flip_fluid-${{ matrix.os }}
          path: |
            build/flip_fluid
            build/flip_fluid*

      - name: Package and upload (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: flip_fluid-windows
          path: |
            build/Release/flip_fluid.exe
            build/Release/*.dll
            build/flip_fluid.exe
